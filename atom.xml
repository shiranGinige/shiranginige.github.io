<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shiran Ginige]]></title>
  <link href="http://shiranginige.github.io/atom.xml" rel="self"/>
  <link href="http://shiranginige.github.io/"/>
  <updated>2015-05-13T13:08:54+10:00</updated>
  <id>http://shiranginige.github.io/</id>
  <author>
    <name><![CDATA[Shiran Ginige]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment Two Applications to the Same Azure WebSite (Using Kudu)]]></title>
    <link href="http://shiranginige.github.io/blog/2015/05/11/using-kudu-to-deploy-two-applications-on-the-same-azure-website/"/>
    <updated>2015-05-11T09:04:40+10:00</updated>
    <id>http://shiranginige.github.io/blog/2015/05/11/using-kudu-to-deploy-two-applications-on-the-same-azure-website</id>
    <content type="html"><![CDATA[<p><strong>Problem </strong> : I have two web projects in the same solution and they need to be deployed in the same AzureWeb site
in two different virtual directories.
(<a href='http://blogs.msdn.com/b/tomholl/archive/2014/09/22/deploying-multiple-virtual-directories-to-a-single-azure-website.aspx'>and yes it is possible in case you haven&rsquo;t noticed </a>)
<a href='http://blog.amitapple.com/post/38419111245/azurewebsitecustomdeploymentpart3'>This post</a> explains well, how you
could achieve this manually. The concern specifically addressed here is deploying both applications continuously.</p>

<p>Below screen is a summary of my expected deployment structure.</p>

<p><img class="left" src="http://shiranginige.github.io/images/using-kudu-to-deploy-two-applications-on-the-same-azure-website/1.jpg"></p>

<p>Taking a step back, there are basically two built-in ways do continuous deployments deployments on Azure Websites.</p>

<pre><code>1. Use VSO Hosted Build Agent
2. Use Kudu deployments
</code></pre>

<p><a href='https://github.com/projectkudu/kudu/wiki/VSO-vs-Kudu-deployments'>Dabid Ebbo explains the difference between the two here </a></p>

<p>The biggest and the most important difference is , <u>Kudu can only be used to do deployments from your local box</u> while
- to state the obvious - VSO build is coupled with your source repo in VSO.</p>

<p>But why am I even bothered about kudu while VSO hosted build is free ( well, 60 mins per month ) and is completely isolated from
the local dev box and have all the bells and whistles built in ( everyone loves XAML , right )?</p>

<p>Well the limitation of VSO build comes when you want to automate the deployments to two virtual directories in the same
website.</p>

<p>At the moment ( May 2015 ) deploying two applications in virtual directories is not supported in in VSO builds.
(<a href='source/_posts/2015-05-11-using-kudu-to-deploy-two-applications-on-the-same-azure-website.markdown:26'>you have to have two solutions for both applications instead</a> )</p>

<p>Fortunately, there is <a href='https://github.com/projectkudu/kudu'>kudu</a>. The awesome engine behind git/hg deployment in Azure websites.</p>

<p>Not only you can creation of deployment scripts is fairly straight-forward, they can be modified and tested  with ease
( ha! , take that VSO build )</p>

<p>I&rsquo;m listing the steps that were followed in achieving the first stated objective using kudu deployments.</p>

<p>NOTE : You&rsquo;d first want to have <a href='http://azure.microsoft.com/en-in/documentation/articles/xplat-cli/'>Azure CLI tools</a> installed to run the following script.</p>

<blockquote><p>Generate the kudu deployment script for Web Project</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>azure site deploymentscript --aspWAP VeryComplexApplication\VeryComplexApplication.Web\VeryComplexApplication.Web.csproj -s VeryComplexApplication.sln</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Rename the generated deployment script</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>move deploy.cmd VeryComplexApplication.Web.deploy.cmd</span></code></pre></td></tr></table></div></figure>


<p>Then find the block with DEPLOYMENT_TARGET and change it as follows ( note the if condition is commented,
because we want to override what is set by kudu by default)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: IF NOT DEFINED DEPLOYMENT_TARGET (
</span><span class='line'>  SET DEPLOYMENT_TARGET=%ARTIFACTS%\website
</span><span class='line'>:: )</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Generate the kudu deployment script for API Project</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>azure site deploymentscript --aspWAP VeryComplexApplication\VeryComplexApplication.API\VeryComplexApplication.API.csproj -s VeryComplexApplication.sln</span></code></pre></td></tr></table></div></figure>


<p>Same as above, change the DEPLOYMENT_TARGET section as follows,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: IF NOT DEFINED DEPLOYMENT_TARGET (
</span><span class='line'>  SET DEPLOYMENT_TARGET=%ARTIFACTS%\api
</span><span class='line'>:: )</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Rename the generated deployment script</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>move deploy.cmd VeryComplexApplication.API.deploy.cmd</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Create a new deploy.cmd file and add the following code block
 ( which will execute deployment scripts for web site and api separately )</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@echo off
</span><span class='line'>
</span><span class='line'>    echo deploying the web site....
</span><span class='line'>
</span><span class='line'>    call VeryComplexApplication.Web.deploy.cmd
</span><span class='line'>
</span><span class='line'>    echo deploying the API ...
</span><span class='line'>
</span><span class='line'>    call VeryComplexApplication.API.deploy.cmd</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Configure Virtual applications in Azure</p></blockquote>

<p>Log into Azure portal and on the respective website , go to configure tab and configure the virtual directories as
seen in the above image.</p>

<blockquote><p>Push the code to the Azure web site by using Local Git Repository option.</p></blockquote>

<p>Commit the newly added *.deploy.cmd files at the root and push the code to Azure website using &lsquo;Local Git Repo&rsquo; option.</p>

<p><img class="left" src="http://shiranginige.github.io/images/using-kudu-to-deploy-two-applications-on-the-same-azure-website/2.png"></p>

<p>Happy deployments !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customising VSO Build Template to Execute an Arbitrary Exe]]></title>
    <link href="http://shiranginige.github.io/blog/2015/05/09/customising-vso-build-template-to-execute-an-exe/"/>
    <updated>2015-05-09T10:37:41+10:00</updated>
    <id>http://shiranginige.github.io/blog/2015/05/09/customising-vso-build-template-to-execute-an-exe</id>
    <content type="html"><![CDATA[<p>I had to work with VSO and Azure WebSites more than usual during the last few days. A bulk of it involved moving
on prem code base to VSO and setting up CI/CD process with VSO build.</p>

<p>One particular scenario I had to tackle was to carryout database patching using
<a href='http://dbup.github.io' >DbUp</a> after the build/deployment is complete. The DBUp upgrade happens in the
form of running an executable generated during the build process.
The default templates does not have any built-in option to run an arbitrary exe as part of the build process.</p>

<p>The VSO build templates, however, can be customized to achieve pretty much anything you would expect to happen in a typical
deployment process - contrary to the common belief that hosted builds are limited to only the default provided options.</p>

<p>Here is a list of items I had do to get the above achieved :</p>

<h3>Step 1 : Download the default build process template.</h3>


<p>Navigate to Team Explorer -> Builds -> Edit Build Definition
In the Process tab, download the default selected build process template.</p>

<p><img class="left" src="http://shiranginige.github.io/images/customising-vso-build-template-to-execute-an-exe/1.png"></p>

<p>Rename the template and add to the source structure ( e.g in my case I added it under /Builds/CustomTemplates/CustomTemplate1.xaml)
As you can see build process template is a .xaml file so you can open it in Visual Studio to modify.</p>

<h3>Step 2 : Add a InvokeProcess task to the template</h3>


<p>Select the InvokeProcess task and add in the appropriate location in the template ( in this case I have decided to update the
database as the last step of the process - but it could well be before tests are executed)</p>

<p><img class="left" src="http://shiranginige.github.io/images/customising-vso-build-template-to-execute-an-exe/2.png"></p>

<p>Add a debug message ( WriteBuildMessage) in the task, so that you can see in the log that the process is triggered.</p>

<h3>Step 3 : Add an input argument</h3>


<p>At the bottom of the xaml designer view, you could find the &lsquo;Arguments&rsquo; tab. The parameter that you expect to be received form the
&lsquo;build definition&rsquo; should be specified here.</p>

<p><img class="left" src="http://shiranginige.github.io/images/customising-vso-build-template-to-execute-an-exe/2-1.png"></p>

<p>In this case I&rsquo;m specifying a argument of type &lsquo;BuildParameter&rsquo; which allows me to specify a collection of items ( name of the exe, input argumets )
But it could also be a simple string or int.</p>

<h3>Step 4 : Specify the process to invoke and the place to look for arguments</h3>


<p>Back in the &lsquo;InvokeProcess&rsquo; task, select &lsquo;Properties&rsquo; to specify the process to execute and where to look for input arguments.</p>

<p><img class="left" src="http://shiranginige.github.io/images/customising-vso-build-template-to-execute-an-exe/3.png"></p>

<p>In the above case I&rsquo;m asking the task to look at the Input Arguments specified in step 3.</p>

<p>Since my executable is part of the build process itself, I need to specify the location MSBUILD has created it in ( which is $TF_BUILD_BINARIESDIRECTORY)
You can find the complete list of build environment variables in <a href='https://msdn.microsoft.com/en-au/library/hh850448.aspx'>this MSDN article</a></p>

<h3>Step 5 : Change the build configuration to use the newly created template</h3>


<p>Check in the modified template and in the build definition select New to specify the location for the new template.</p>

<p><img class="left" src="http://shiranginige.github.io/images/customising-vso-build-template-to-execute-an-exe/4.png"></p>

<p>Give the relative path of your template file under &lsquo;path in repo&rsquo;</p>

<h3>Step 6 : Update the build configuration with the required parameters</h3>


<p>When the new template is selected in the build definition, you should see the newly specified &lsquo;Arguments&rsquo; in the &lsquo;Misc&rsquo; section
at the bottom.
<img class="left" src="http://shiranginige.github.io/images/customising-vso-build-template-to-execute-an-exe/5.png"></p>

<p>Update the exe name and specify the input arguments and queue a new build. Queue a new build check the log to see if the
debug message from the InvokeProcess is present. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# to Javascript : Objects]]></title>
    <link href="http://shiranginige.github.io/blog/2015/01/23/csharp-to-javascript-objects/"/>
    <updated>2015-01-23T08:36:08+11:00</updated>
    <id>http://shiranginige.github.io/blog/2015/01/23/csharp-to-javascript-objects</id>
    <content type="html"><![CDATA[<p>The best thing about Javascript is it&rsquo;s inherently easy way to deal with objects.</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">order</span> <span class="o">=</span> <span class="p">{</span><span class="nx">productCode</span><span class="o">:</span><span class="s2">&quot;XYZ&quot;</span> <span class="p">,</span> <span class="nx">quantity</span><span class="o">=</span><span class="mi">3</span><span class="p">};</span></code></pre></div>


<p>Done. Here you have your order object! No need to define classes or nothing.</p>

<p>How do you access the properties? There are two ways&hellip;</p>

<pre><code>1. Dot notation , i.e =&gt; order.productCode;

2. Subscript notation, i.e =&gt; order["productCode"];
</code></pre>

<h3>Objects are more than that</h3>


<p>In JavaScript, pretty much everything is an object. All primitive types ( String, Boolean, Number,etc) are objects</p>

<p>You can even define a full-on object with methods , on the fly ( to hell with classes , eh?)</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">items</span><span class="o">:</span> <span class="p">[],</span>
    <span class="nx">addItem</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">cart</span><span class="p">.</span><span class="nx">addItem</span><span class="p">({</span><span class="nx">Product</span><span class="o">:</span><span class="s1">&#39;QWER&#39;</span><span class="p">,</span><span class="nx">Quantity</span><span class="o">:</span><span class="mi">12</span><span class="p">});</span></code></pre></div>


<p>&ndash;TODO&ndash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# to Javascript : Classes]]></title>
    <link href="http://shiranginige.github.io/blog/2015/01/21/csharp-to-javascript-classes/"/>
    <updated>2015-01-21T08:22:48+11:00</updated>
    <id>http://shiranginige.github.io/blog/2015/01/21/csharp-to-javascript-classes</id>
    <content type="html"><![CDATA[<h3>Show me the classes or I won&#8217;t do it ! </h3>


<p>One of the first questions that any C# developer would come across is, where are the &ldquo;Classes&rdquo;. Let&rsquo;s take a look at a typical
class implementation in C# and see how we achieve conceptually the same thing with JavaScript.</p>

<p> A simple Class in C#</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Cart</span>
 <span class="p">{</span>
   <span class="k">private</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">OrderLine</span><span class="p">&gt;</span> <span class="n">_orderLineItems</span><span class="p">;</span>

   <span class="k">public</span> <span class="nf">Cart</span><span class="p">()</span>
   <span class="p">{</span>
     <span class="n">_cartItems</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">OrderLine</span><span class="p">&gt;();</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">void</span> <span class="nf">AddItem</span><span class="p">(</span><span class="n">OrderLineItem</span> <span class="n">orderLineItem</span><span class="p">)</span>
   <span class="p">{</span>
    <span class="n">_cartItems</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">orderLineItem</span><span class="p">);</span>
   <span class="p">}</span>
 <span class="p">}</span>

<span class="c1">//usage</span>


 <span class="kt">var</span> <span class="n">cart</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Cart</span><span class="p">();</span>
 <span class="n">cart</span><span class="p">.</span><span class="n">AddItem</span><span class="p">(</span><span class="k">new</span> <span class="n">OrderLineItem</span><span class="p">(){</span><span class="n">ProductCode</span><span class="p">=</span><span class="s">&quot;QWER1234&quot;</span> <span class="p">,</span> <span class="n">Quantity</span><span class="p">=</span><span class="m">3</span><span class="p">});</span></code></pre></div>


<p>Class in Javascript</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Cart</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">cartItems</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">addItem</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">orderLineItem</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">cartItems</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">orderLineItem</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">Print</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">cartItems</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Quantity of : &quot;</span> <span class="o">+</span> <span class="nx">cartItems</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Quantity</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//usage</span>

<span class="kd">var</span> <span class="nx">cart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cart</span><span class="p">();</span>

<span class="nx">cart</span><span class="p">.</span><span class="nx">addItem</span><span class="p">({</span><span class="s2">&quot;ProductCode&quot;</span><span class="o">:</span> <span class="s2">&quot;Qwer1234&quot;</span><span class="p">,</span> <span class="s2">&quot;Quantity&quot;</span><span class="o">:</span> <span class="s2">&quot;3&quot;</span><span class="p">});</span>

<span class="nx">cart</span><span class="p">.</span><span class="nx">Print</span><span class="p">();</span></code></pre></div>


<p>As you can see, there is no keyword called  &lsquo;class&rsquo; in JavaScript, but use functions to achieve the structure we want.</p>

<p>This is called the constructor pattern. Unlike a typical JavaScript function UpperCase convention is followed when naming
the constructor function. The function should &lsquo;always&rsquo; be called with the new keyword (mind you it is possible to call the
constructor function without the new keyword and it would lead to unprecedented results.</p>

<p>David Crawford explains what happens when you don&rsquo;t include new keyword it in his book JavaScript : The good parts (page 49)</p>

<p>If you forget to include the new prefix when calling a constructor function,
then this will not be bound to the new object.Sadly, this will be bound to the global object,
so instead of augmenting your new object, you will be clobbering global variables. That is really bad. There is no compile warning, and there is no runtime warning. (page 49)</p>

<ol>
<li>Constructor function should follow the UpperCase convention</li>
<li>Should always use the new keyword to invoke a function</li>
</ol>

]]></content>
  </entry>
  
</feed>
