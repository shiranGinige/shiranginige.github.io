<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript,objects | Coding Frenzy]]></title>
  <link href="http://shiranginige.github.io/blog/categories/javascript-objects/atom.xml" rel="self"/>
  <link href="http://shiranginige.github.io/"/>
  <updated>2015-05-10T23:32:46+10:00</updated>
  <id>http://shiranginige.github.io/</id>
  <author>
    <name><![CDATA[Shiran Ginige]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# to Javascript : Objects]]></title>
    <link href="http://shiranginige.github.io/blog/2015/01/23/csharp-to-javascript-objects/"/>
    <updated>2015-01-23T08:36:08+11:00</updated>
    <id>http://shiranginige.github.io/blog/2015/01/23/csharp-to-javascript-objects</id>
    <content type="html"><![CDATA[<p>The best thing about Javascript is it&rsquo;s inherently easy way to deal with objects.</p>

<p><div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">order</span> <span class="o">=</span> <span class="p">{</span><span class="nx">productCode</span><span class="o">:&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">XYZ</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">,</span> <span class="nx">quantity</span><span class="o">=</span><span class="mi">3</span><span class="p">};</span></code></pre></div></p>

<p>Done. Here you have your order object! No need to define classes or nothing.</p>

<p>How do you access the properties? There are two ways&hellip;</p>

<pre><code>1. Dot notation , i.e =&gt; order.productCode;

2. Subscript notation, i.e =&gt; order["productCode"];
</code></pre>

<h3>Objects are more than that</h3>


<p>In JavaScript, pretty much everything is an object. All primitive types ( String, Boolean, Number,etc) are objects</p>

<p>You can even define a full-on object with methods , on the fly ( to hell with classes , eh?)</p>

<p><div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">items</span><span class="o">:</span> <span class="p">[],</span>
    <span class="nx">addItem</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">cart</span><span class="p">.</span><span class="nx">addItem</span><span class="p">({</span><span class="nx">Product</span><span class="o">:&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">QWER</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="nx">Quantity</span><span class="o">:</span><span class="mi">12</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>&ndash;TODO&ndash;</p>
]]></content>
  </entry>
  
</feed>
