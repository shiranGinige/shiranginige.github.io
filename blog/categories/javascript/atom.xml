<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Shiran Ginige]]></title>
  <link href="http://shiranginige.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://shiranginige.github.io/"/>
  <updated>2016-03-23T23:33:10+11:00</updated>
  <id>http://shiranginige.github.io/</id>
  <author>
    <name><![CDATA[Shiran Ginige]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using ES2015 in 2015 ]]></title>
    <link href="http://shiranginige.github.io/blog/2015/11/19/using-es6-end-of-2015/"/>
    <updated>2015-11-19T11:22:56+11:00</updated>
    <id>http://shiranginige.github.io/blog/2015/11/19/using-es6-end-of-2015</id>
    <content type="html"><![CDATA[<p>It is nearly 2016 and everyone&rsquo;s favorite language is getting a new look. ES2015 (a.k.a ES6) has been around some time
but seems it would take a little while until everyone ( browsers,backend engines like node) is on board with the new features. Luckily, we don&rsquo;t have to wait until someone confirms it it now good to go -  to stat using
these features. There are quite a few options available already to use ES6 today and convert to ES5 compatible (transpile) versions.</p>

<h1>Using a Transpiler</h1>

<hr />

<h2>Traceur</h2>

<p><a href="https://github.com/google/traceur-compiler">Traceur</a> is a library developed at google to transpile ES6 code to ES5 compatible version. Here is how to use it.</p>

<h3>In a build environment</h3>

<p>Install traceur globally</p>

<pre><code> $ npm install traceur -g
</code></pre>

<p>Execute traceur to transpile the es6 .js (all) files</p>

<pre><code>   $ traceur --block-binding true --dir ./src ./out
</code></pre>

<h3>To use inside a gulp task</h3>

<p>Install gulp-traceur</p>

<pre><code> $ npm install gulp-traceur -g
</code></pre>

<p>Create a Gulp task</p>

<pre><code>   var gulp = require('gulp');
   var traceur = require('gulp-traceur');

    gulp.task('traceur' , function(){
        return gulp.src('source/**/*.js')
                    .pipe(traceur({experimental:true , blockBinding:true}))
                    .pipe(gulp.dest('out'));
    })

    gulp.task('default', function(){
        gulp.run('traceur');
    });
</code></pre>

<h3>In the browser directly</h3>

<p><a href="http://plnkr.co/edit/XJeIU9bS9LxwA9cGftIV">Here</a> is a example plunker using traceur</p>

<p>Note the below line to enable experimental features</p>

<pre><code> &lt;script&gt;
      traceur.options.experimental = true;
 &lt;/script&gt;
</code></pre>

<h2>Babel</h2>

<p>Unlike traceur, <a href="https://babeljs.io">Babel</a> supports only server side transpiling however as of November 2015 it seems to be the most popular choice.</p>

<h3>Install Babel</h3>

<pre><code>$ npm install babel -g
</code></pre>

<h3>Transpile</h3>

<pre><code>$ babel ./src --out-dir ./out --source-maps
</code></pre>

<h3>To concatenate</h3>

<pre><code>$ babel ./src --out-file ./out/all.js
</code></pre>

<p>Typically you&rsquo;d use a Gulp task to transpile as we did before with Traceur</p>

<h1>Using Polyfills</h1>

<hr />

<p>Using Polyfills are less disruptive than using a Transpiler but there is a caveat that not all features in ES6 are implemented in Polyfills. You simply have to find the Polyfill that implement a certain feature and include that in your project in order to use it.
If there is no bower module for that, it could be a simple download and include in the project.</p>

<p><a href="http://plnkr.co/edit/EGWny6A2OUIdMVT5fq1W?p=preview">This plunk</a> shows how to use new Array features in ES6 using es6-arrays polyfill</p>

<h1>ES6 Shim</h1>

<hr />

<p>ES6 Shim is a collection of Polyfills that is easy to include in browser when you need to directly use ES6 features in the client</p>

<p><a href="http://plnkr.co/edit/jm9GB4FOFDZfaxEeWaTq?p=preview">This Plunker</a> shows how to use a shim to use new Array and Promise features</p>

<h1>Summary</h1>

<p>You should be able to play with new ES6 features though the browser support is not yet available for all of the features.
Transpilers, Polyfills and Shims are some the popular ways of achieving it and what to use is really depends on the situation.</p>
]]></content>
  </entry>
  
</feed>
